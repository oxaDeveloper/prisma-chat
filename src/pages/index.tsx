import axios from "axios";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import AddChat from "~/components/addChat";
import AddMember from "~/components/addMember";
import ListOfChats from "~/components/listOfChats";
import Members from "~/components/members";
import Message from "~/components/message";

export default function Home() {
  const [addNew, setAddNew] = useState(null);
  const [addNewMember, setAddNewMember] = useState(false);
  const [members, setMembers] = useState(false);
  const [selectSender, setSelectSender] = useState(false);
  const [activeChat, setActiveChat] = useState(null);

  const [inputValue, setInputValue] = useState("");
  const [messageValue, setMessageValue] = useState("");
  const [sender, setSender] = useState(null);
  const [totalOfMembers, setTotalOfMembers] = useState(0);

  const [allUsers, setAllUsers] = useState([]);
  const [allGroups, setAllGroups] = useState([]);
  const [allMessages, setAllMessages] = useState([]);
  const [membersInGroup, setMembersInGroup] = useState([]);
  const [membersNotInGroup, setMembersNotInGroup] = useState([]);
  const allChats = allUsers.concat(allGroups);

  const messageDataForSend = {
    body: messageValue,
    groupId: activeChat,
    userId: sender,
  };

  const createChat = async () => {
    await axios.post(`/api/${addNew === "G" ? "group" : "user"}`, {
      name: inputValue,
    });
    setAddNew(null);

    await fetchUsers();
    await fetchGroups();
    await fetchMembersNotInGroup();
  };

  const fetchUsers = async () => {
    await axios.get("/api/user").then((res) => {
      setAllUsers(res.data);
    });
  };

  const fetchGroups = async () => {
    await axios.get("/api/group").then((res) => {
      setAllGroups(res.data);
    });
  };

  const fetchMessages = async () => {
    await axios.get("/api/message").then((res) => {
      setAllMessages(res.data);
    });
  };

  const fetchMembersInGroup = async () => {
    await axios
      .get("/api/usersInGroup" + `?groupId=${activeChat}`)
      .then((res) => {
        setMembersInGroup(res.data);
      });
  };

  const fetchMembersNotInGroup = async () => {
    await axios
      .get("/api/usersNotInGroup" + `?groupId=${activeChat}`)
      .then((res) => {
        setMembersNotInGroup(res.data);
      });
  };

  useEffect(() => {
    fetchUsers();
    fetchGroups();
    fetchMessages();
    if (activeChat !== null) {
      fetchMembersInGroup();
      fetchMembersNotInGroup();
    }
  }, [activeChat]);

  const deleteData = async (id: String, type: String) => {
    await axios.delete(`/api/${type}?id=${id}`);
    await fetchUsers();
    await fetchGroups();
  };

  const deleteMessage = async (id: String) => {
    await axios.delete(`/api/message?id=${id}`);
    await fetchMessages();
  };

  const addMemberToGroup = async (userId: String) => {
    await axios.put("/api/group", {
      groupId: activeChat,
      members: {
        create: {
          userId: userId,
        },
      },
    });
    await fetchMembersInGroup();
    await fetchMembersNotInGroup();
    setAddNewMember(false);
  };

  const deleteMemberFromGroup = async (userId: string) => {
    await axios.delete(
      `/api/usersInGroup?groupId=${activeChat}&userId=${userId}`,
    );
    await fetchMembersInGroup();
    await fetchMembersNotInGroup();
    setMembers(false);
  };

  const calculateMembers = () => {
    setTotalOfMembers(allUsers.length - membersNotInGroup.length);
  };

  useEffect(() => {
    calculateMembers();
  });

  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [allMessages]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen text-white">
        <AddChat
          addNew={addNew}
          inputValue={inputValue}
          setInputValue={setInputValue}
          createChat={createChat}
        />

        <div className="fixed h-screen overflow-auto bg-black">
          <ListOfChats
            addNew={addNew}
            setAddNew={setAddNew}
            allChats={allChats}
            deleteData={deleteData}
            activeChat={activeChat}
            setActiveChat={setActiveChat}
          />
        </div>

        {activeChat !== null && (
          <div className="mx-5 flex min-h-screen w-screen flex-col items-end gap-2 py-20">
            {addNewMember && (
              <div className="fixed left-0 top-0 z-50 flex h-screen w-screen items-center justify-center bg-black bg-opacity-50">
                <div className="rounded-lg bg-white px-5 py-4 text-black">
                  <h1 className="mb-3 text-center text-xl font-semibold">
                    Add new Member
                  </h1>

                  {membersNotInGroup.length !== 0 ? (
                    <AddMember
                      membersNotInGroup={membersNotInGroup}
                      addMemberToGroup={addMemberToGroup}
                    />
                  ) : (
                    <p>All users have been added!</p>
                  )}

                  <button
                    className="mt-4 w-full rounded-lg border-2 border-blue-500 bg-blue-500 text-lg uppercase text-white"
                    onClick={() => {
                      setAddNewMember(false);
                    }}
                  >
                    CANCEL
                  </button>
                </div>
              </div>
            )}

            {members && (
              <div className="fixed left-0 top-0 z-50 flex h-screen w-screen items-center justify-center bg-black bg-opacity-50">
                <div className="rounded-lg bg-white px-5 py-4 text-black">
                  <h1 className="mb-3 text-center text-xl font-semibold">
                    Members
                  </h1>

                  <Members
                    membersInGroup={membersInGroup}
                    deleteMemberFromGroup={deleteMemberFromGroup}
                  />

                  <button
                    className="mt-4 w-full rounded-lg border-2 border-blue-500 bg-blue-500 text-lg uppercase text-white"
                    onClick={() => {
                      setMembers(false);
                    }}
                  >
                    CANCEL
                  </button>
                </div>
              </div>
            )}

            <div className="fixed right-0 top-0 flex w-[74.55vw] items-center justify-between gap-4 bg-black p-4">
              <h1
                onClick={() => {
                  setAddNewMember(true);
                }}
                className="cursor-pointer"
              >
                Add Member
              </h1>

              <p
                className="cursor-pointer text-gray-500"
                onClick={() => {
                  if (totalOfMembers != 0) {
                    setMembers(true);
                  }
                }}
              >
                {totalOfMembers == 0
                  ? "No members yet"
                  : `${totalOfMembers} member${totalOfMembers != 1 ? "s" : ""}`}
              </p>
            </div>

            {allMessages.map(
              (message: any) =>
                message.groupId === activeChat && (
                  <Message
                    allChats={allChats}
                    message={message}
                    deleteMessage={deleteMessage}
                  />
                ),
            )}

            <div ref={messagesEndRef} />

            <div className="fixed bottom-5 flex items-center">
              <input
                value={messageValue}
                type="text"
                placeholder="Message ..."
                className="w-[72vw] rounded-full bg-black py-2 pl-4 pr-20 text-xl text-white outline-none"
                onChange={(e) => {
                  setMessageValue(e.target.value);
                }}
              />

              <div className="fixed right-10 flex items-center">
                {selectSender && (
                  <div className="absolute bottom-10 right-0 grid gap-2 rounded-t-2xl rounded-bl-2xl border bg-black p-2 text-right">
                    {membersInGroup.map(
                      (chat: any) =>
                        chat.type === "user" && (
                          <p
                            className={`cursor-pointer px-3 ${sender === chat.id && "text-green-500"}`}
                            onClick={() => {
                              if (sender !== chat.id) {
                                setSender(chat.id);
                              } else {
                                setSender(null);
                              }
                            }}
                          >
                            {chat.name}
                          </p>
                        ),
                    )}

                    <button
                      onClick={async () => {
                        if (sender !== null) {
                          await axios.post("/api/message", messageDataForSend);
                          setMessageValue("");
                          setSelectSender(false);
                          setSender(null);
                          await fetchMessages();
                        }
                      }}
                      className="rounded-sm bg-blue-600 font-semibold text-black"
                    >
                      SEND
                    </button>
                  </div>
                )}

                <button
                  className={
                    selectSender
                      ? "text-red-700"
                      : messageValue === ""
                        ? "text-[#263b4f]"
                        : "text-[#3ba0ff]"
                  }
                  disabled={messageValue === ""}
                  onClick={() => {
                    if (totalOfMembers != 0) {
                      setSelectSender((selectSender) => !selectSender);
                    } else {
                      alert(
                        "You cannot send a message because there are no members in the group",
                      );
                    }
                  }}
                >
                  {selectSender ? "undo" : "select"}
                </button>
              </div>
            </div>
          </div>
        )}
      </main>
    </>
  );
}
